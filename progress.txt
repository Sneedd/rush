
Rush Utility Library
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NOTE:
- Der Name Rush kommt von dem Hund von MegaMan.
- Die String Klasse ist Unicode fähig.


TODO:
- Hinzufügen des TODO Verzeichnisses
- XML auf Basis von wxWidgets oder tinyxml2?
    - XML muss Unicode kompatibel sein
- ObjectArray
    - CopyTo() implementieren
    - Reverse() implementieren
    - ReadOnly Flag implementieren
- String
    - Falls _RUSH_SUPPORTS_WXWIDGETS_ aktiv dann in String wxString verwenden
    - Bzw testen ob direkt typedef String wxString; verwendet werden könnte
    - Unicode
- Sortierungen
    - Quicksort
    - Introsort
    - Smoothsort (?)
    - Stabiles Sortierungsverfahren
- Anstatt Dictionary
    - StaticHashTable (Optimiert auf kleiner Speicherbedarf, langsam beim Hinzufügen)
    - DynamicHashTable (Optimiert auf schelles Hinzufügen, großer Speicherbedarf)
    - Hashing von int, string, wxString und Klassen mit IHashable
- Version
    - Read and Write
    - Assigment Operator
    - Copy Constructor
- NTL Library einbauen (als rush::math)
    - Und vervollständigen
- pthreads verwenden (als rush::threads)
    - WorkDistributor (input work und verteilen auf viele threads)
    - WorkCollector (input work und in einem thread abarbeiten)
    - ThreadPool
    - ObjectQueueSafe
    - ObjectStackSafe




Name                Implemented     Tested          Doku
---------------------------------------------------------------
BuildInExpect       100%            100%            100%
Callback            100%            100%            50%
Console             90%             100%            100%
Convert             1%              1%              1%
Dictionary          0%              0%              0%
List                10%             2%              0%
Log                 90%             30%             90%
ReverseList         0%              0%              0%
Macros              1%              0%              0%
MathEvaluation      95%             70%             70%
ObjectArray         90%             10%             30%
ObjectDeque         100%            5%              100%
ObjectQueue         90%             10%             90%
ObjectStack         90%             70%             90%
Parser              10%             10%             5%
PrimitiveArray      80%             40%             10%
PriorityQueue       0%              0%              0%
Random              20%             20%             0%
Rect                80%             0%              5%
Stack               90%             0%              90%
String              90%             50%             20%
StringArray         80%             60%             90%
System              20%             10%             5%
Vector              100%            1%              100%
Xml                 0%              0%              0%




Roadmap:
- Ini Parser
- CircularBuffer
- CSV Parser
- Like-Comparer
- Hierachial Text File (see Particle Engine Text Format)
- Binary Tree
- Tree Klasse adoptieren (siehe TODO bzw C# ???)
- BinaryTree Klasse implementieren (siehe C# Beispiel???)
- Term Klasse (Mathematische Klasse um Terme darzustellen und optimieren)








